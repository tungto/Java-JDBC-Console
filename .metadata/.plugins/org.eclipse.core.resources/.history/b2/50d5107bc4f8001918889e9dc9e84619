
package com.laptrinhjavaweb.responsitory.impl;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.laptrinhjavaweb.annotation.Entity;
import com.laptrinhjavaweb.annotation.Table;
import com.laptrinhjavaweb.mapper.ResultSetMapper;
import com.laptrinhjavaweb.responsitory.JPARepository;

public class SimpleJPARepository<T> implements JPARepository<T> {

	private Class<T> zClass;

	@SuppressWarnings("unchecked")
	public SimpleJPARepository() {
		Type type = getClass().getGenericSuperclass();
		ParameterizedType parameterizedType = (ParameterizedType) type;
		zClass = (Class<T>) parameterizedType.getActualTypeArguments()[0];
	}

	@Override
	public List<T> findAll(int offset, int limit, Object...where) {
		String tableName = "";
		if (zClass.isAnnotationPresent(Entity.class) && zClass.isAnnotationPresent(Table.class))  {
			Table tableClass = zClass.getAnnotation(Table.class);
			tableName = tableClass.name();
		}
		
		
		
		StringBuilder sql = new StringBuilder("select * from " + tableName + " limit " + offset + ", " + limit + " where 1=1");
		
		if(where != null && where.length >0) {
			sql.append(where[0]);
		}
//		List<T> results = new ArrayList<>();
		ResultSetMapper<T> resultSetMapper = new ResultSetMapper<>();
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		try {
			connection = EntityManagerFactory.getConnection();
			statement = connection.prepareStatement(sql.toString());
			resultSet = statement.executeQuery();
			
			/*
			 * while (resultSet.next()) { results.add(rowMapper.mapRow(resultSet));
			 * 
			 * }
			 */

			return resultSetMapper.mapRow(resultSet, this.zClass);
		} catch (SQLException e) {
			return null;
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (resultSet != null) {
					resultSet.close();
				}
			} catch (SQLException e) {
				return null;
			}
		}
		/* return null; */
	}

}
